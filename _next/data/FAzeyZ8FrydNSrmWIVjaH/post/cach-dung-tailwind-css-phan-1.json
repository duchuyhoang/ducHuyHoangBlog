{"pageProps":{"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      img: \"img\",\n      a: \"a\",\n      h2: \"h2\",\n      ul: \"ul\",\n      li: \"li\",\n      hr: \"hr\",\n      code: \"code\",\n      strong: \"strong\",\n      pre: \"pre\"\n    }, _provideComponents(), props.components), {Quote} = _components;\n    if (!Quote) _missingMdxReference(\"Quote\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"tailwindBg.jpg\",\n          alt: \"'tailwindBg'\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Chào các bạn qua bài trước chắc hẳn các bạn đã có thể cài đặt TailwindCSS\\ncho dự án của mình rồi nếu các bạn bỏ lỡ thì nó \", _jsx(_components.a, {\n          href: \"/post/cai-dat-tailwind-css\",\n          children: \"ở đây\"\n        }), \".\\nHôm nay chúng ta tiếp tục với việc tìm hiểu TailwindCSS qua các ví dụ.\"]\n      }), \"\\n\", _jsxs(\"div\", {\n        id: \"tailwindFunctionMenu\",\n        children: [_jsxs(_components.h2, {\n          children: [_jsx(_components.a, {\n            href: \"#tailwindFunctionMenu\",\n            children: _jsx(\"img\", {\n              src: \"hashtag.svg\",\n              width: \"20px\",\n              height: \"20px\"\n            })\n          }), \" Mục lục\"]\n        }), _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.a, {\n              href: \"#tailwindFunctionIndex\",\n              children: \"Core concepts\"\n            }), \"\\n\", _jsxs(_components.ul, {\n              children: [\"\\n\", _jsx(_components.li, {\n                children: _jsx(_components.a, {\n                  href: \"#tailwindNew\",\n                  children: \"Điểm mới khi dùng Tailwind CSS\"\n                })\n              }), \"\\n\", _jsxs(_components.li, {\n                children: [_jsx(_components.a, {\n                  href: \"#tailwindUtilities\",\n                  children: \"Utilities trong Tailwind CSS\"\n                }), \"\\n\", _jsxs(_components.ul, {\n                  children: [\"\\n\", _jsx(_components.li, {\n                    children: _jsx(_components.a, {\n                      href: \"#tailwindUtilityPseudoClasses\",\n                      children: \"Pseudo classes\"\n                    })\n                  }), \"\\n\", _jsx(_components.li, {\n                    children: _jsx(_components.a, {\n                      href: \"#tailwindUtilityPseudoElements\",\n                      children: \"Pseudo elements\"\n                    })\n                  }), \"\\n\", _jsx(_components.li, {\n                    children: _jsx(_components.a, {\n                      href: \"#tailwindUtilityMediaQuery\",\n                      children: \"Media queries\"\n                    })\n                  }), \"\\n\", _jsx(_components.li, {\n                    children: _jsx(_components.a, {\n                      href: \"#tailwindUtilityAttributeSelector\",\n                      children: \"Attribute selectors\"\n                    })\n                  }), \"\\n\"]\n                }), \"\\n\"]\n              }), \"\\n\", _jsxs(_components.li, {\n                children: [_jsx(_components.a, {\n                  href: \"#tailwindResponsive\",\n                  children: \"Responsive design\"\n                }), \"\\n\", _jsxs(_components.ul, {\n                  children: [\"\\n\", _jsx(_components.li, {\n                    children: _jsx(_components.a, {\n                      href: \"#tailwindResponsiveDefault\",\n                      children: \"Default break points của Tailwind CSS\"\n                    })\n                  }), \"\\n\", _jsx(_components.li, {\n                    children: _jsx(_components.a, {\n                      href: \"#tailwindResponsiveCustomizingConfig\",\n                      children: \"Điều chỉnh breakpoints Tailwind CSS\"\n                    })\n                  }), \"\\n\"]\n                }), \"\\n\"]\n              }), \"\\n\", _jsx(_components.li, {\n                children: _jsx(_components.a, {\n                  href: \"#tailwindDarkMode\",\n                  children: \"Dark Mode\"\n                })\n              }), \"\\n\", _jsx(_components.li, {\n                children: _jsx(_components.a, {\n                  href: \"#tailwindReusingStyles\",\n                  children: \"Tái sử dụng style\"\n                })\n              }), \"\\n\"]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), _jsx(_components.hr, {})]\n      }), \"\\n\", _jsxs(\"div\", {\n        id: \"tailwindFunctionIndex\",\n        children: [_jsxs(\"article\", {\n          id: \"tailwindNew\",\n          children: [_jsxs(_components.h2, {\n            children: [_jsx(_components.a, {\n              href: \"#tailwindNew\",\n              children: _jsx(\"img\", {\n                src: \"hashtag.svg\",\n                width: \"20px\",\n                height: \"20px\"\n              })\n            }), \" Điểm mới khi dùng Tailwind CSS\"]\n          }), _jsxs(_components.ul, {\n            children: [\"\\n\", _jsxs(_components.li, {\n              children: [\"\\n\", _jsxs(_components.p, {\n                children: [\"Tailwind cho phép chúng ta reuse lại các class CSS có sẵn (tương tự Bootstrap)\\nđiểm khác biệt là Bootstrap dành cho element còn Tailwind là property. Lấy ví dụ\\nBootrap có các class như \", _jsx(_components.code, {\n                  children: \"modal\"\n                }), \",\", _jsx(_components.code, {\n                  children: \"btn\"\n                }), \",... các class này đã được đóng gói để trở thành\\nmột element hoàn chỉnh còn Tailwind của chúng ta chỉ là các thuộc tính \", _jsx(_components.code, {\n                  children: \"bg-sky-500\"\n                }), \",\", _jsx(_components.code, {\n                  children: \"rounded\"\n                }), \", ...\"]\n              }), \"\\n\"]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [\"\\n\", _jsxs(_components.p, {\n                children: [\"Các class kiểu thuộc tính của Bootstrap cũng có như \", _jsx(_components.code, {\n                  children: \"position-relative\"\n                }), \",\", _jsx(_components.code, {\n                  children: \"border\"\n                }), \", ...\\nnhưng về độ đa dạng và độ mềm dẻo thì chắc chắn không thể bằng Tailwind được.\"]\n              }), \"\\n\"]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [\"\\n\", _jsxs(_components.p, {\n                children: [_jsx(_components.strong, {\n                  children: \"Về responsive\"\n                }), \" Tailwind có thể cho chúng ta inline style được lẫn cả các\\n\", _jsx(_components.a, {\n                  href: \"https://www.w3schools.com/css/css_pseudo_classes.asp\",\n                  children: \"pseudo-classes\"\n                }), \",\\n\", _jsx(_components.a, {\n                  href: \"https://www.w3schools.com/css/css_pseudo_elements.asp\",\n                  children: \"pseudo-elements\"\n                }), \",\\n\", _jsx(_components.a, {\n                  href: \"https://www.w3schools.com/css/css_attribute_selectors.asp\",\n                  children: \"attribute selectors\"\n                })]\n              }), \"\\n\"]\n            }), \"\\n\"]\n          })]\n        }), _jsxs(\"article\", {\n          id: \"tailwindUtilities\",\n          children: [_jsxs(_components.h2, {\n            children: [_jsx(_components.a, {\n              href: \"#tailwindUtilities\",\n              children: _jsx(\"img\", {\n                src: \"hashtag.svg\",\n                width: \"20px\",\n                height: \"20px\"\n              })\n            }), \" Utilities trong Tailwind CSS\"]\n          }), _jsxs(\"section\", {\n            id: \"tailwindUtilityPseudoClasses\",\n            children: [_jsxs(_components.ul, {\n              children: [\"\\n\", _jsx(_components.li, {\n                children: \"Với Pseudo classes:\"\n              }), \"\\n\"]\n            }), _jsx(_components.pre, {\n              filename: \"App.js\",\n              children: _jsx(_components.code, {\n                className: \"language-jsx\",\n                children: \"// Hover button example\\n<button className=\\\"rounded text-white text-center px-2 py-1 bg-sky-500 hover:bg-sky-700\\\">\\nButton\\n</button>\\n\\n// Input focus example\\n<input type=\\\"email\\\"\\n  className=\\\"mt-3 rounded px-2 py-1 text-slate-900 border-slate-300 border outline-none focus:ring-1 focus:ring-sky-500 focus:invalid:ring-red-500 invalid:border-red-500\\\"\\n  placeholder=\\\"Email only...\\\"/>\\n\\n// Style children base on parent pseudo class. Add ``group`` to parent\\n<div aria-label=\\\"Parent\\\" className=\\\"group bg-sky-500 hover:bg-black\\\">\\n<div aria-label=\\\"Children\\\">\\n\\t<p className=\\\"group-hover:text-red-500\\\">Hover parent to see me change color to red</p>\\n\\t<p className=\\\"group-hover:text-green-500\\\">Hover parent to see me change color to green</p>\\n</div>\\n</div>\\n\\n// Style next sibling based on another sibling. Add ``peer`` to a previous sibling (only previous siblings can be marked as peers)\\n<input type={\\\"email\\\"} placeholder=\\\"Email only...\\\"\\nclassName=\\\"mt-3 rounded px-2 py-1 text-slate-900 border-slate-300 border outline-none focus:ring-1 focus:ring-sky-500 focus:invalid:ring-red-500 invalid:border-red-500 peer\\\"\\n/>\\n<p className=\\\"text-red-500 invisible peer-invalid:visible\\\">Email invalid</p>\\n\"\n              })\n            }), _jsx(_components.hr, {})]\n          }), _jsxs(\"section\", {\n            id: \"tailwindUtilityPseudoElements\",\n            children: [_jsxs(_components.ul, {\n              children: [\"\\n\", _jsx(_components.li, {\n                children: \"Với Pseudo elements:\"\n              }), \"\\n\"]\n            }), _jsx(_components.pre, {\n              filename: \"App.js\",\n              children: _jsx(_components.code, {\n                className: \"language-jsx\",\n                children: \"// First letter uppercase and placeholder italic\\n<p className=\\\"first-letter:uppercase\\\">hello world</p>\\n<input type=\\\"text\\\" placeholder=\\\"Type here\\\"\\nclassName=\\\"first-letter:uppercase rounded px-2 py-1 border border-sky-500 outline-none placeholder:italic\\\"\\n/>\\n\\n// Before and after\\n<label class=\\\"block\\\">\\n  <span class=\\\"after:content-['*'] after:ml-0.5 after:text-red-500 block text-sm font-medium text-slate-700\\\">\\n    Email\\n  </span>\\n  <input type=\\\"email\\\" name=\\\"email\\\" class=\\\"mt-1 px-3 py-2 bg-white border shadow-sm border-slate-300 placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-sky-500 block w-full rounded-md sm:text-sm focus:ring-1\\\" placeholder=\\\"you@example.com\\\" />\\n</label>\\n\"\n              })\n            }), _jsx(_components.hr, {})]\n          }), _jsxs(\"section\", {\n            id: \"tailwindUtilityMediaQuery\",\n            children: [_jsxs(_components.ul, {\n              children: [\"\\n\", _jsxs(_components.li, {\n                children: [\"Với Media queries:\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.ul, {\n                  children: [\"\\n\", _jsxs(_components.li, {\n                    children: [\"Có lẽ các bạn đều đã quen thuộc với \", _jsx(_components.a, {\n                      href: \"https://getbootstrap.com/docs/4.0/layout/grid/\",\n                      children: \"Grid system\"\n                    }), \" của\\nBootstrap với 1 class \", _jsx(_components.code, {\n                      children: \"row\"\n                    }), \" làm parent container và các class \", _jsx(_components.code, {\n                      children: \"col-{number}\"\n                    }), \", \", _jsx(_components.code, {\n                      children: \"col-sm-{number}\"\n                    }), \", ...\\nChúng ta có thể triển khai grid system của Boostrap bằng Tailwind và nhiều hơn thế nữa.\"]\n                  }), \"\\n\"]\n                }), \"\\n\"]\n              }), \"\\n\"]\n            }), _jsx(_components.pre, {\n              filename: \"App.js\",\n              children: _jsx(_components.code, {\n                className: \"language-jsx\",\n                children: \"// Example col grid system using Tailwind\\n<div className=\\\"flex h-10 flex-wrap\\\" aria-label=\\\"Parent\\\">\\n\\t<div className=\\\"w-2/3 sm:w-full lg:w-1/2 bg-zinc-900\\\"></div>\\n\\t<div className=\\\"w-1/3 lg:w-1/2 bg-red-500\\\"></div>\\t\\t\\n</div>\\n\"\n              })\n            }), _jsx(_components.hr, {})]\n          }), _jsxs(\"section\", {\n            id: \"tailwindUtilityAttributeSelector\",\n            children: [_jsxs(_components.ul, {\n              children: [\"\\n\", _jsxs(_components.li, {\n                children: [\"Với attribute selectors:\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.ul, {\n                  children: [\"\\n\", _jsxs(_components.li, {\n                    children: [\"Dưới đây là 1 ví dụ của mình với attribute selector.Trong ví dụ này mình áp dụng cả\\n\", _jsx(_components.a, {\n                      href: \"https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values\",\n                      children: _jsx(_components.code, {\n                        children: \"arbitrary values\"\n                      })\n                    })]\n                  }), \"\\n\"]\n                }), \"\\n\"]\n              }), \"\\n\"]\n            }), _jsx(_components.pre, {\n              filename: \"App.js\",\n              children: _jsx(_components.code, {\n                className: \"language-jsx\",\n                children: \"\\n// _ mean whitespace so when it compiled all children with author=\\\"Huy\\\" attribute will\\nhave background red\\n<div className=\\\"[&_[author='Huy']]:bg-red-500\\\">\\n\\t<p author={\\\"Huy\\\"}>Huy</p>\\n</div>\\n\\n// Or you can change like this to make current element background red if it had author=\\\"Huy\\\"\\n\\n<div className=\\\"[&[author='Huy']]:bg-red-500\\\" author={\\\"Huy\\\"}>\\n\\t<p>Huy</p>\\n</div>\\n\\n// Copy both of codes and run to see the difference between them ^^\\n\"\n              })\n            })]\n          }), _jsx(_components.hr, {})]\n        }), _jsxs(\"article\", {\n          id: \"tailwindResponsive\",\n          children: [_jsxs(_components.h2, {\n            children: [_jsx(_components.a, {\n              href: \"#tailwindResponsive\",\n              children: _jsx(\"img\", {\n                src: \"hashtag.svg\",\n                width: \"20px\",\n                height: \"20px\"\n              })\n            }), \" Responsive trong Tailwind CSS\"]\n          }), _jsxs(\"section\", {\n            id: \"tailwindResponsiveDefault\",\n            children: [_jsxs(_components.ul, {\n              children: [\"\\n\", _jsx(_components.li, {\n                children: \"Config breakpoints mặc định của  Tailwind\"\n              }), \"\\n\"]\n            }), _jsxs(\"table\", {\n              children: [_jsxs(\"tr\", {\n                children: [_jsx(\"th\", {\n                  children: \"Prefix\"\n                }), \"\\n\", _jsx(\"th\", {\n                  children: \"Minimum width\"\n                }), \"\\n\", _jsx(\"th\", {\n                  children: \"CSS\"\n                })]\n              }), _jsxs(\"tr\", {\n                children: [_jsxs(\"td\", {\n                  children: ['`', \"sm\", '`']\n                }), \"\\n\", _jsx(\"td\", {\n                  children: \"640px\"\n                }), \"\\n\", _jsxs(\"td\", {\n                  children: ['`', \"@media (min-width: 640px) \", '{ ... }', '`']\n                })]\n              }), _jsxs(\"tr\", {\n                children: [_jsxs(\"td\", {\n                  children: ['`', \"md\", '`']\n                }), \"\\n\", _jsx(\"td\", {\n                  children: \"768px\"\n                }), \"\\n\", _jsxs(\"td\", {\n                  children: ['`', \"@media (min-width: 768px) \", '{ ... }', '`']\n                })]\n              }), _jsxs(\"tr\", {\n                children: [_jsxs(\"td\", {\n                  children: ['`', \"lg\", '`']\n                }), \"\\n\", _jsx(\"td\", {\n                  children: \"1024px\"\n                }), \"\\n\", _jsxs(\"td\", {\n                  children: ['`', \"@media (min-width: 1024px) \", '{ ... }', '`']\n                })]\n              }), _jsxs(\"tr\", {\n                children: [_jsxs(\"td\", {\n                  children: ['`', \"xl\", '`']\n                }), \"\\n\", _jsx(\"td\", {\n                  children: \"1280px\"\n                }), \"\\n\", _jsxs(\"td\", {\n                  children: ['`', \"@media (min-width: 1280px) \", '{ ... }', '`']\n                })]\n              }), _jsxs(\"tr\", {\n                children: [_jsxs(\"td\", {\n                  children: ['`', \"2xl\", '`']\n                }), \"\\n\", _jsx(\"td\", {\n                  children: \"1536px\"\n                }), \"\\n\", _jsxs(\"td\", {\n                  children: ['`', \"@media (min-width: 1536px) \", '{ ... }', '`']\n                })]\n              })]\n            }), _jsx(\"div\", {\n              className: \"mt-3 mb-3\",\n              children: _jsx(_components.p, {\n                children: \"Để dùng các breakpoint cùng với style chỉ định chúng ta dùng cú pháp:\"\n              })\n            }), _jsx(_components.pre, {\n              filename: \"App.js\",\n              children: _jsx(_components.code, {\n                className: \"language-jsx\",\n                children: \"// Breakpoints from above corresponding with style class  \\n<div class=\\\"w-16 md:w-32 lg:w-48 h-6 bg-slate-800\\\"></div>\\n\"\n              })\n            }), _jsx(\"div\", {\n              className: \"mt-3 mb-3\",\n              children: _jsxs(_components.p, {\n                children: [\"Tailwind CSS responsive sử dụng \", _jsx(_components.code, {\n                  children: \"mobile first breakpoint system\"\n                }), \" giống như\\nBootrap.\"]\n              })\n            }), _jsx(_components.pre, {\n              filename: \"App.js\",\n              children: _jsx(_components.code, {\n                className: \"language-jsx\",\n                children: \"// Don't use sm: to target mobile devices because only on screens 640px or wider, not on smaller screen\\n<div className=\\\"sm:w-1/2\\\"></div>\\n\\n// Tailwind breakpoints only include a min-width and don’t include a max-width\\n// So we just need targeting a single breakpoint if screen width is not wider than md so div's width 100%\\n<div className=\\\"w-full md:w-1/2 h-6 bg-slate-800\\\"></div>\\n\"\n              })\n            }), _jsx(_components.hr, {})]\n          }), _jsxs(\"section\", {\n            id: \"tailwindResponsiveCustomizingConfig\",\n            children: [_jsxs(_components.h2, {\n              children: [_jsx(_components.a, {\n                href: \"#tailwindResponsiveCustomizingConfig\",\n                children: _jsx(\"img\", {\n                  src: \"hashtag.svg\",\n                  width: \"20px\",\n                  height: \"20px\"\n                })\n              }), \" Responsive trong Tailwind CSS\"]\n            }), _jsxs(_components.ul, {\n              children: [\"\\n\", _jsx(_components.li, {\n                children: \"Custom lại breakpoints của Tailwind\"\n              }), \"\\n\"]\n            }), _jsx(_components.pre, {\n              filename: \"tailwind.config.js\",\n              children: _jsx(_components.code, {\n                className: \"language-js\",\n                children: \"/** @type {import('tailwindcss').Config} */\\nconst defaultTheme = require(\\\"tailwindcss/defaultTheme\\\");\\n\\nmodule.exports = {\\n  content: [\\\"./src/**/*.{html,js,jsx,ts,tsx}\\\"],\\n  theme: {\\n    extend: {\\n      screens: {\\n        tablet: \\\"640px\\\",\\n        // => @media (min-width: 640px) { ... }\\n\\n        laptop: \\\"1024px\\\",\\n        // => @media (min-width: 1024px) { ... }\\n\\n        desktop: \\\"1280px\\\",\\n        // => @media (min-width: 1280px) { ... }\\n      },\\n    },\\n  },\\n  screens: {\\n    ...defaultTheme.screens,\\n    sm: \\\"576px\\\",\\n    // => @media (min-width: 576px) { ... }\\n\\n    md: \\\"960px\\\",\\n    // => @media (min-width: 960px) { ... }\\n\\n    lg: \\\"1440px\\\",\\n    // => @media (min-width: 1440px) { ... }\\n  },\\n  plugins: [],\\n};\\n\\n\"\n              })\n            }), _jsx(Quote, {\n              title: \"Về cú pháp\",\n              type: \"INFO\",\n              children: _jsxs(_components.ul, {\n                children: [\"\\n\", _jsxs(_components.li, {\n                  children: [\"Ở đây chúng ta có thêm breakpoint vào \", _jsx(_components.code, {\n                    children: \"theme\"\n                  }), \" trong \", _jsx(_components.code, {\n                    children: \"extend\"\n                  }), \" những key:\\n\", _jsx(_components.code, {\n                    children: \"tablet\"\n                  }), \", \", _jsx(_components.code, {\n                    children: \"laptop\"\n                  }), \", \", _jsx(_components.code, {\n                    children: \"desktop\"\n                  }), \".\"]\n                }), \"\\n\", _jsx(_components.li, {\n                  children: \"Và overwrite các breakpoints có sẵn của Tailwind.\"\n                }), \"\\n\"]\n              })\n            })]\n          }), _jsx(_components.hr, {})]\n        }), _jsxs(\"article\", {\n          id: \"tailwindDarkMode\",\n          children: [_jsxs(_components.h2, {\n            children: [_jsx(_components.a, {\n              href: \"#tailwindDarkMode\",\n              children: _jsx(\"img\", {\n                src: \"hashtag.svg\",\n                width: \"20px\",\n                height: \"20px\"\n              })\n            }), \" Dark Mode\"]\n          }), _jsxs(_components.p, {\n            children: [\"Tiếp theo là một tính năng mà rất nhiều website đã triển khai, đó là\\n\", _jsx(_components.code, {\n              children: \"Dark Mode\"\n            }), \". Tailwind đã bao gồm thuộc tính \", _jsx(_components.code, {\n              children: \"dark\"\n            }), \" cái mà sẽ giúp\\nchúng ta style lại website khi mà dark mode được kích hoạt.\"]\n          }), _jsx(\"br\", {}), _jsxs(_components.p, {\n            children: [\"Trước hết chung ta thêm config vào file \", _jsx(_components.code, {\n              children: \"tailwind.config.js\"\n            })]\n          }), _jsx(_components.pre, {\n            filename: \"tailwind.config.js\",\n            children: _jsx(_components.code, {\n              className: \"language-js\",\n              children: \"module.exports = {\\n  darkMode: 'class',\\n  // ...\\n}\\n\"\n            })\n          }), _jsx(\"div\", {\n            className: \"mt-3 mb-3\",\n            children: _jsxs(_components.p, {\n              children: [\"Sau đây là 1 ví dụ nhỏ về cách tích hợp \", _jsx(_components.code, {\n                children: \"Dark Mode\"\n              }), \" của Tailwind\"]\n            })\n          }), _jsx(_components.pre, {\n            filename: \"App.jsx\",\n            showLine: true,\n            children: _jsx(_components.code, {\n              className: \"language-jsx\",\n              children: \"import React, { useEffect, useState } from \\\"react\\\";\\nexport const App = () => {\\n  // I'm using a state because sometime you want to update dark mode based on\\n  // something like local storage maybe\\n  const [isDarkMode, setIsDarkMode] = useState(false);\\n  useEffect(() => {\\n    let htmlElement = document.documentElement;\\n    if (isDarkMode && htmlElement) {\\n      htmlElement.classList.add(\\\"dark\\\");\\n    } else {\\n      htmlElement.classList.remove(\\\"dark\\\");\\n    }\\n  }, [isDarkMode]);\\n\\n  const handleChangeMode = () => {\\n    setIsDarkMode((prev) => !prev);\\n  };\\n  return (\\n    <>\\n      <section\\n        className=\\\"w-screen h-screen flex items-center justify-center bg-slate-300 dark:bg-gray-900\\\"\\n      >\\n        <button\\n          className=\\\"p-2 border border-solid border-gray-900 rounded focus:border-sky-500 focus:ring-1 bg-sky-300\\\"\\n          onClick={handleChangeMode}\\n        >\\n          Change mode\\n        </button>\\n      </section>\\n    </>\\n  );\\n};\\n\"\n            })\n          }), _jsx(_components.hr, {})]\n        }), _jsxs(\"article\", {\n          id: \"tailwindReusingStyles\",\n          children: [_jsxs(_components.h2, {\n            children: [_jsx(_components.a, {\n              href: \"#tailwindReusingStyles\",\n              children: _jsx(\"img\", {\n                src: \"hashtag.svg\",\n                width: \"20px\",\n                height: \"20px\"\n              })\n            }), \" Tái sử dụng style trong TailwindCSS\"]\n          }), _jsx(_components.p, {\n            children: \"Bootstrap có các class với style có thể hiểu được dưới dạng elements.Chúng ta hoàn toàn có thể\\nthực hiện ý tưởng đó với Tailwind.\"\n          }), _jsx(_components.pre, {\n            filename: \"App.jsx\",\n            children: _jsx(_components.code, {\n              className: \"language-jsx\",\n              children: \"<button class=\\\"btn-primary\\\">\\n  Save changes\\n</button>\\n\"\n            })\n          }), _jsx(\"div\", {\n            className: \"mt-3 mb-3\",\n            children: _jsx(_components.p, {\n              children: \"Và file CSS\"\n            })\n          }), _jsx(_components.pre, {\n            filename: \"index.css\",\n            children: _jsx(_components.code, {\n              className: \"language-css\",\n              children: \"@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n\\n@layer components {\\n  .btn-primary {\\n    @apply py-2 px-4 bg-blue-500 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75;\\n  }\\n}\\n\"\n            })\n          }), _jsxs(Quote, {\n            title: \"Lưu ý\",\n            type: \"WARNING\",\n            children: [_jsxs(_components.p, {\n              children: [\"Bất kể bạn làm gì, đừng dùng \", _jsx(_components.code, {\n                children: \"@apply\"\n              }), \" chỉ để làm mọi thứ \", '\"', \"cleaner\", '\"', \" vì:\"]\n            }), _jsxs(_components.ul, {\n              children: [\"\\n\", _jsx(_components.li, {\n                children: \"Bạn cần phải nghĩ tên class cho style mới.\"\n              }), \"\\n\", _jsx(_components.li, {\n                children: \"Bạn cần phải nhảy qua nhảy lại giữa các file.\"\n              }), \"\\n\", _jsxs(_components.li, {\n                children: [\"Tạo style mới dễ phá vỡ các style khác vì CSS là \", _jsx(_components.code, {\n                  children: \"global\"\n                })]\n              }), \"\\n\", _jsx(_components.li, {\n                children: \"Gói CSS bundle sẽ lớn hơn yepp\"\n              }), \"\\n\"]\n            })]\n          }), _jsx(_components.hr, {})]\n        }), _jsxs(\"article\", {\n          id: \"tailwindConclusionNext\",\n          children: [_jsxs(_components.h2, {\n            children: [_jsx(_components.a, {\n              href: \"#tailwindConclusionNext\",\n              children: _jsx(\"img\", {\n                src: \"hashtag.svg\",\n                width: \"20px\",\n                height: \"20px\"\n              })\n            }), \" Tổng kết\"]\n          }), _jsxs(_components.p, {\n            children: [\"Với phần 1 này mình đã giới thiệu cho các bạn cú pháp đơn giản của TailwindCSS rồi.\\nHãy tiếp tục với phần 2 về các function và nhiều thứ nâng cao hơn \", _jsx(_components.a, {\n              href: \"\",\n              children: \"ở đây\"\n            }), \" nhé\"]\n          })]\n        })]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"fileMetadata":{"slug":"cach-dung-tailwind-css-phan-1","title":"Giới thiệu các directives đặc biệt và cách dùng TailwindCSS (phần 1)","date":"10/10/2022","image":"tailwindBg.jpg","author":{"name":"Đức Huy Hoàng","avatar":"selfAvatar.jpg"},"description":"Chào các bạn qua bài trước chắc hẳn các bạn đã có thể cài đặt TailwindCSS cho dự án của mình rồi nếu các bạn bỏ lỡ thì nó ở đây.Hôm nay chúng ta tiếp tục với việc tìm hiểu TailwindCSS qua các ví dụ.","tags":["News","Tech","Tailwind CSS","Frontend"],"isFeature":false,"minuteRead":10},"compliedSource":""},"__N_SSG":true}